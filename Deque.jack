class Deque {
	field Array data;
	field int length;
	field int ql;
	field int qr;
	constructor Deque new(int _length) {
		let length = _length;
		let data = Array.new(length);
		let ql = 0;
		let qr = 0;
		return this;
	}
	method void dispose() {
		do data.dispose();
		return;
	}
	method bool empty() {
		return ql = qr;
	}
	method void push_back(int x) {
		let data[qr] = x;
		let qr = qr + 1;
		if (qr = length) {
			let qr = 0;
		}
		return;
	}
	method void push_front(int x) {
		let data[ql] = x;
		let ql = ql - 1;
		if (ql = -1) {
			let qr = length - 1;
		}
		return;
	}
	method void pop_front() {
		let ql = ql + 1;
		if (ql = length) {
			let ql = 0;
		}
		return;
	}
	method void pop_back() {
		let qr = qr - 1;
		if (qr = -1) {
			let qr = length - 1;
		}
		return;
	}
	method int front() {
		return data[ql];
	}
	method int back() {
		return data[qr - 1];
	}
	method int size(){
		if(ql > qr){
			return (qr+length-ql);
		}
		else{
			return (qr-ql);
		}
	}
}